
[gcode_macro PRINT_START]
variable_enclosed_temp_min: 52
gcode:
    BACKUP_CFG
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set material = params.FILAMENT_TYPE | string %}

    M190 S{bedtemp}                     ; set correct bed temp
    {% if material == 'ABS' or material == 'ASA' %}
      SET_FAN_SPEED FAN=BedFans SPEED=1
      RESPOND MSG="Waiting for chamber temp to reach {enclosed_temp_min}C"
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={enclosed_temp_min} MAXIMUM=999
      SET_FAN_SPEED FAN=BedFans SPEED=0
    {% elif material == 'PLA' or material == 'PETG' %}
    {% else %}
     RESPOND MSG="No specific chamber temp needed"
    {% endif %}
    M109 S145 ; set nozzle to homing temp
    G90 ; absolute positioning
    G28
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE
    G28 Z ; home Z
    BED_MESH_CALIBRATE 
    G1 X30 Y10 Z20 F3000                ; move nozzle to purge position
    M109 S{hotendtemp}                  ; set nozzle to target temp
    G90                                 ; absolute positioning
    LINE_PURGE
  
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    M400                           ; wait for buffer to clear
    SET_SKEW CLEAR=1
    G92 E0                         ; zero the extruder
    G1 E-35.0 F1800                ; retract filament                        
    TURN_OFF_HEATERS
    G91
    G1 Z+2 F3600
    G90                            ; absolute positioning
    G0 X302 Y320 F3600             ; park nozzle at rear
    M107                           ; turn off fan    
    BED_MESH_CLEAR
    #RESTORE_GCODE_STATE NAME=STATE_PRINT_START
    SET_SKEW CLEAR=1
    #M84 ; turn off motors

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_SKEW CLEAR=1
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=ðŸ”¥ MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=ðŸ”¥ MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}    

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
  _QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
  _QUAD_GANTRY_LEVEL horizontal_move_z=3

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 301 # starting position - offset a bit to the right from the brush
variable_start_y: 342 # starting Y position - offset a bit to the front of the brush
variable_start_z: 4   #starting Z height. This should barely touch the surface of the brush
variable_x_min: 266     #left side of the brush 
variable_x_max: 301     #right side of the brush
variable_y_min: 345 #front side of the brush - make sure the nozzle is over the last line of bristles 
variable_y_max: 347 #rear side of the brush - make sure the nozzle is over the first line of bristles
variable_z1: 3.2 # second z height of the nozzle over the brush - this should be with the nozzle slightly sunk in
variable_z2: 2.4 # third z height of the nozzle over the brush - this should be with the nozzle fully sunk into the brush, but not touching the bottom of it.
variable_wipe_qty: 2 #how many times to run the cleaning sequence
variable_wipe_spd: 200 #cleaning speed
variable_raise_distance: 5 # z height after cleaning is done
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  
  G90  ; absolute positioning
  ### Move nozzle to start position
  G1 X{start_x} Y{start_y} F9000
  G1 X{x_max} Y{y_min} F9000
  G1 Z{start_z} F1500
  ### Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe left and right
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe diagonally
    G1 Z{start_z} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
   G1 Z{z1} F1500
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{start_x} Y{y_min} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  G1 X{start_x} Y{start_y} F9000 #go back to starting position
  ## Raise nozzle
  G1 Z{raise_distance} 